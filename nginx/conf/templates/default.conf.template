  log_format timed_combined '$remote_addr - $remote_user [$time_local]  '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" '
    '$request_time $upstream_response_time $pipe';

upstream tomcat {
    keepalive 2;
    # tomcat closes idle connections after 20s, we need to close first
    keepalive_timeout 19s;
    server ${NGINX_TOMCAT};
}
upstream node {
    keepalive 2;
    # express closes idle connections after 5s, we need to close first
    keepalive_timeout 4s;
    server ${NGINX_NODE};
}

# set client body size to 512M #
client_max_body_size 512M;

# Sets buffer size for reading client request body. In case the request body is larger than the buffer,
# the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages.
client_body_buffer_size 256k;

# Defines a timeout for reading client request body. The timeout is set only for a period between two successive read
# operations, not for the transmission of the whole request body.
client_body_timeout 5s;
# Defines a timeout for reading client request header.
client_header_timeout 5s;

# see https://github.com/ufal/clarin-dspace/issues/1130#issuecomment-2721421902
# 128m/20s -> 6.4MB/s; if this is not good enough maybe X-Accel-Redirect?
proxy_max_temp_file_size 128m;

server {
    error_log  /var/log/nginx/error.log notice;
    access_log  /var/log/nginx/access.log  main;
    
    error_log  syslog:server=syslog:5140 notice;
    access_log syslog:server=syslog:5140 timed_combined;
    listen 443 ssl;
    server_name ${NGINX_SERVER_NAMES};
    #limit_conn conn_per_ip 50;
    #limit_req zone=req_per_ip burst=100 nodelay;

    root  /var/www;
    index index.html index.htm;

    ssl_certificate /ssl/nginx_chain_cert.pem;
    ssl_certificate_key /ssl/serverkey.pem;
    resolver ${NGINX_RESOLVERS} valid=300s; # normally this would be in ssl_params, but I need a template
    include ssl_params;
    #include cors_headers;

    location = /shibauthorizer {
        internal;
        include fastcgi_params;
        fastcgi_pass ${NGINX_SHIBAUTHORIZER};
    }

    location /Shibboleth.sso {
        include fastcgi_params;
        fastcgi_pass ${NGINX_SHIBRESPONDER};
    }

    location = /Shibboleth.sso/DiscoFeed/jsonp {
        echo_before_body 'dj_md_1('; 
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_param CONTENT_TYPE $content_type;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param REMOTE_ADDR $remote_addr;
        fastcgi_param REMOTE_USER $remote_user;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param REQUEST_URI '/Shibboleth.sso/DiscoFeed';
        fastcgi_param SERVER_NAME $server_name;
        fastcgi_param SERVER_PORT $server_port;
        fastcgi_pass ${NGINX_SHIBRESPONDER};
        echo_after_body ');';
    }

    location /server/ {
        include proxy_params;
        client_max_body_size ${NGINX_MAX_BODY_SIZE};
        #https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_connect_timeout says this shouldn't exceed 75 seconds
        proxy_connect_timeout 75;
        proxy_send_timeout 6000;
        proxy_read_timeout 6000;
        send_timeout 6000;
        proxy_pass http://tomcat;
    }

    location /server/api/authn/shibboleth {
        include shibboleth_auth;
        include proxy_params;
        proxy_pass http://tomcat;
    }

    location / {
        try_files $uri @FE;
    }

    location @FE {
        include proxy_params;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass http://node;
    }

    include /etc/nginx/locations/*;
}

# HTTP server a redirect
#
server {
    listen 80 default_server;
    server_name ${NGINX_SERVER_NAMES};
    #limit_conn conn_per_ip 50;
    #limit_req zone=req_per_ip burst=100 nodelay;

    root  /var/www;
    index index.html index.htm;

    return 301 https://$http_host$request_uri;
}
